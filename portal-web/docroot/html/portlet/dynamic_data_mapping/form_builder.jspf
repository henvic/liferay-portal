<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String[] availableLanguageIds = LocalizationUtil.getAvailableLanguageIds(script);

Locale[] availableLocales = new Locale[availableLanguageIds.length];

for (int i = 0; i < availableLanguageIds.length; i++) {
    availableLocales[i] = LocaleUtil.fromLanguageId(availableLanguageIds[i]);
}

String defaultLanguageId = LocalizationUtil.getDefaultLanguageId(script, LocaleUtil.getSiteDefault());
%>

<div class="separator"><!-- --></div>

<div class="alert alert-danger hide lfr-message-response" id="<portlet:namespace />messageContainer"></div>

<liferay-ui:tabs
    names='<%= LanguageUtil.get(request, "view[action]") + "," + LanguageUtil.get(request, "source") %>'
    refresh="<%= false %>"
>
    <liferay-ui:section>
        <div id="<portlet:namespace />formBuilderTab">

            <aui:translation-manager
                availableLocales="<%= availableLocales %>"
                defaultLanguageId="<%= defaultLanguageId %>"
                id="translationManager"
                initialize="<%= false %>"
                readOnly="<%= false %>"
            />

            <div class="form-builder form-builder" id="<portlet:namespace />formBuilder">
                <div class="form-builder-content" id="<portlet:namespace />formBuilderContent">
                </div>
            </div>
        </div>
    </liferay-ui:section>

    <liferay-ui:section>
        <div class="form-builder-source-wrapper" id="<portlet:namespace />formBuilderSourceWrapper">
            <div class="form-builder-source" id="<portlet:namespace />formBuilderEditor"></div>
        </div>
    </liferay-ui:section>
</liferay-ui:tabs>

<%
JSONArray availableLocalesJSONArray = JSONFactoryUtil.createJSONArray();

for (int i = 0; i < availableLocales.length; i++) {
    availableLocalesJSONArray.put(LanguageUtil.getLanguageId(availableLocales[i]));
}

JSONObject localesMapJSONObject = JSONFactoryUtil.createJSONObject();

for (Locale availableLocale : LanguageUtil.getAvailableLocales(themeDisplay.getSiteGroupId())) {
    localesMapJSONObject.put(LocaleUtil.toLanguageId(availableLocale), availableLocale.getDisplayName(locale));
}
%>

<aui:script use="aui-datepicker-deprecated,event-custom-base,json,liferay-portlet-dynamic-data-lists,liferay-portlet-dynamic-data-mapping,liferay-portlet-dynamic-data-mapping-custom-fields,aui-tabview,aui-ace-editor,liferay-xml-formatter,aui-form-builder">
    var Lang = A.Lang;

    var MESSAGE_FAILURE = 0;

    var MESSAGE_SUCCESS = 1;

    var CSS_MESSAGE_ERROR = 'alert alert-danger';

    var CSS_MESSAGE_SUCCESS = 'alert alert-success';

    var STR_VALUE = 'value';

    var availableFields;
    var formEditor;

    var layout = new A.Layout({
        rows: [
            new A.LayoutRow({
                cols: [
                    new A.LayoutCol({
                        size: 12
                    })
                ]
            })
        ]
    });

    var displayMessage = function(type, message) {
        var messageContainer = A.one('#<portlet:namespace />messageContainer');

        messageContainer.removeClass(CSS_MESSAGE_SUCCESS).removeClass(CSS_MESSAGE_ERROR);

        var messageClass = CSS_MESSAGE_SUCCESS;

        if (type === MESSAGE_FAILURE) {
            messageClass = CSS_MESSAGE_ERROR;
        }

        messageContainer.addClass(messageClass);
        messageContainer.html(message);

        messageContainer.show();
    };

    var getContentValue = function() {
        var content;

        if (formEditor && !isViewTabActive()) {
            content = formEditor.get(STR_VALUE);
        }
        else {
            content = formBuilder.getContent();
        }

        return content;
    };

    var getFormEditor = function() {
        if (!formEditor) {
            formEditor = new A.AceEditor(
                {
                    boundingBox: '#<portlet:namespace />formBuilderEditor',
                    height: 600,
                    mode: 'xml',
                    tabSize: 4,
                    width: 600
                }
            ).render();
        }

        return formEditor;
    };

    var isViewTabActive = function() {
        return !A.one('#<portlet:namespace />formBuilderTab').ancestor().hasClass('hide');
    };

    var reloadFormBuilderData = function(content) {
        if (!Lang.isValue(content)) {
            content = window.<portlet:namespace />getContentDefinition();
        }

        // deserialize here and set...
        console.log(content); // formBuilder.set ...
    };

    var setEditorSize = function() {
        if (!isViewTabActive()) {
            getFormEditor().set('width', A.one('#<portlet:namespace />formBuilderSourceWrapper').get('clientWidth'));
        }
    };

    var switchToSource = function() {
        setEditorSize();

        var content = 'get form builder structure';

        getFormEditor().set(STR_VALUE, content);
    };

    var switchToView = function() {
        reloadFormBuilderData(formEditor.get(STR_VALUE));
    };

    new A.FormBuilder({
        fieldTypes: [{
            fieldClass: A.FormBuilderFieldSentence,
            icon:'glyphicon glyphicon-font',
            label: 'Sentence'
        },{
            fieldClass: A.FormBuilderFieldChoice,
            icon:'glyphicon glyphicon-font',
            label: 'Choice',
            unique: true
        },{
            fieldClass: A.FormBuilderFieldList,
            icon:'glyphicon glyphicon-font',
            label: 'List'
        },{
            fieldClass: A.FormBuilderFieldText,
            icon:'glyphicon glyphicon-font',
            label: 'Text'
        },{
            fieldClass: A.FormBuilderFieldText,
            icon:'glyphicon glyphicon-font',
            label: 'Text'
        },{
            fieldClass: A.FormBuilderFieldTime,
            icon:'glyphicon glyphicon-font',
            label: 'Time'
        },{
            fieldClass: A.FormBuilderFieldScale,
            icon:'glyphicon glyphicon-font',
            label: 'Scale'
        },{
            fieldClass: A.FormBuilderFieldDate,
            icon:'glyphicon glyphicon-font',
            label: 'Date'
        },{
            fieldClass: A.FormBuilderFieldGrid,
            icon:'glyphicon glyphicon-font',
            label: 'Grid'
        },{
            fieldClass: A.FormBuilderFieldGeolocation,
            icon: 'glyphicon glyphicon-font',
            label: 'Geolocation'
        },{
            fieldClass: A.FormBuilderFieldLinkToPage,
            icon: 'glyphicon glyphicon-font',
            label: 'Link to page'
        },{
            fieldClass: A.FormBuilderFieldHtmlText,
            icon: 'glyphicon glyphicon-font',
            label: 'HTML Text'
        }],
        layout: layout
    }).render('#<portlet:namespace />formBuilder');

    var dialog = Liferay.Util.getWindow();

    if (dialog) {
        dialog.after('widthChange', setEditorSize);
    }

    var afterShowTab = function(event) {
        if (isViewTabActive()) {
            switchToView();
        }
        else {
            switchToSource();
        }
    };

    Liferay.after('showTab', afterShowTab);

    var clearShowTabHandle = function(event) {
        if (event.portletId === '<%= portletDisplay.getRootPortletId() %>') {
            Liferay.detach('showTab', afterShowTab);
            Liferay.detach('destroyPortlet', clearShowTabHandle);
        }
    };

    Liferay.on('destroyPortlet', clearShowTabHandle);
</aui:script>